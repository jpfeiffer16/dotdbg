Content-Length: 218

{"body":{"capabilities":{"supportTerminateDebuggee":true,"supportsConditionalBreakpoints":true,"supportsConfigurationDoneRequest":true,"supportsFunctionBreakpoints":true}},"event":"capabilities","seq":1,"type":"event"}Content-Length: 56

{"body":{},"event":"initialized","seq":2,"type":"event"}Content-Length: 91

{"body":{},"command":"initialize","request_seq":1,"seq":3,"success":true,"type":"response"}Content-Length: 87

{"body":{},"command":"launch","request_seq":2,"seq":4,"success":true,"type":"response"}Content-Length: 160

{"body":{"breakpoints":[{"id":1,"line":105,"message":"","verified":false}]},"command":"setBreakpoints","request_seq":3,"seq":5,"success":true,"type":"response"}Content-Length: 98

{"body":{},"command":"configurationDone","request_seq":4,"seq":6,"success":true,"type":"response"}Content-Length: 287

{"body":{"module":{"id":"b6a3f731-a4de-419b-8921-712bef3a42f9","name":"System.Private.CoreLib.dll","path":"/usr/share/dotnet/shared/Microsoft.NETCore.App/2.1.7/System.Private.CoreLib.dll","symbolStatus":"Skipped loading symbols."},"reason":"new"},"event":"module","seq":7,"type":"event"}Content-Length: 86

{"body":{"reason":"started","threadId":13765},"event":"thread","seq":8,"type":"event"}Content-Length: 265

{"body":{"module":{"id":"3cb660c9-4562-449d-b703-ec9b15c8a61d","name":"syncomp.dll","path":"/home/jpfeiffer/Source/Synacor/cs/syncomp/src/bin/Debug/netcoreapp2.0/syncomp.dll","symbolStatus":"Symbols loaded."},"reason":"new"},"event":"module","seq":9,"type":"event"}Content-Length: 136

{"body":{"breakpoint":{"id":1,"line":105,"message":"","verified":true},"reason":"changed"},"event":"breakpoint","seq":10,"type":"event"}Content-Length: 272

{"body":{"module":{"id":"4fdfd093-7039-4003-b13c-bf392ec1f8ec","name":"System.Runtime.dll","path":"/usr/share/dotnet/shared/Microsoft.NETCore.App/2.1.7/System.Runtime.dll","symbolStatus":"Skipped loading symbols."},"reason":"new"},"event":"module","seq":11,"type":"event"}Content-Length: 280

{"body":{"module":{"id":"d0dd9eed-9abd-4edb-84b4-30db1eec2880","name":"System.Collections.dll","path":"/usr/share/dotnet/shared/Microsoft.NETCore.App/2.1.7/System.Collections.dll","symbolStatus":"Skipped loading symbols."},"reason":"new"},"event":"module","seq":12,"type":"event"}Content-Length: 284

{"body":{"module":{"id":"de1d58ee-dc49-4d0f-981e-09eaf57485c8","name":"System.IO.FileSystem.dll","path":"/usr/share/dotnet/shared/Microsoft.NETCore.App/2.1.7/System.IO.FileSystem.dll","symbolStatus":"Skipped loading symbols."},"reason":"new"},"event":"module","seq":13,"type":"event"}Content-Length: 294

{"body":{"module":{"id":"60a5c7db-4891-4309-984c-e33399a5d551","name":"System.Runtime.Extensions.dll","path":"/usr/share/dotnet/shared/Microsoft.NETCore.App/2.1.7/System.Runtime.Extensions.dll","symbolStatus":"Skipped loading symbols."},"reason":"new"},"event":"module","seq":14,"type":"event"}Content-Length: 272

{"body":{"module":{"id":"924cedca-ea5b-40c6-8889-f8bef0e7fbc4","name":"System.Console.dll","path":"/usr/share/dotnet/shared/Microsoft.NETCore.App/2.1.7/System.Console.dll","symbolStatus":"Skipped loading symbols."},"reason":"new"},"event":"module","seq":15,"type":"event"}Content-Length: 266

{"body":{"module":{"id":"4d8436d1-dc65-4b1c-bb5b-e9a40c8f59d6","name":"System.Linq.dll","path":"/usr/share/dotnet/shared/Microsoft.NETCore.App/2.1.7/System.Linq.dll","symbolStatus":"Skipped loading symbols."},"reason":"new"},"event":"module","seq":16,"type":"event"}Content-Length: 270

{"body":{"module":{"id":"d957375d-db83-4eab-b4b0-1585983f4f15","name":"System.Memory.dll","path":"/usr/share/dotnet/shared/Microsoft.NETCore.App/2.1.7/System.Memory.dll","symbolStatus":"Skipped loading symbols."},"reason":"new"},"event":"module","seq":17,"type":"event"}Content-Length: 304

{"body":{"module":{"id":"d0ca21b3-4257-4ae4-aaff-9d51632e1574","name":"System.Text.RegularExpressions.dll","path":"/usr/share/dotnet/shared/Microsoft.NETCore.App/2.1.7/System.Text.RegularExpressions.dll","symbolStatus":"Skipped loading symbols."},"reason":"new"},"event":"module","seq":18,"type":"event"}Content-Length: 276

{"body":{"module":{"id":"a7a22fb7-d450-4ac4-84b0-a6989088db2f","name":"System.Threading.dll","path":"/usr/share/dotnet/shared/Microsoft.NETCore.App/2.1.7/System.Threading.dll","symbolStatus":"Skipped loading symbols."},"reason":"new"},"event":"module","seq":19,"type":"event"}Content-Length: 87

{"body":{"reason":"started","threadId":13778},"event":"thread","seq":20,"type":"event"}Content-Length: 143

{"body":{"allThreadsStopped":true,"description":"","reason":"breakpoint","text":"","threadId":13765},"event":"stopped","seq":21,"type":"event"}Content-Length: 164

{"body":{"threads":[{"id":13765,"name":"<No name>"},{"id":13778,"name":"<No name>"}]},"command":"threads","request_seq":5,"seq":22,"success":true,"type":"response"}Content-Length: 634

{"body":{"stackFrames":[{"column":13,"endColumn":51,"endLine":105,"id":59120224829440,"line":105,"moduleId":"3cb660c9-4562-449d-b703-ec9b15c8a61d","name":"syncomp.Program.CompileCode()","source":{"name":"Program.cs","path":"/home/jpfeiffer/Source/Synacor/cs/syncomp/src/Program.cs"}},{"column":13,"endColumn":73,"endLine":50,"id":59120224829441,"line":50,"moduleId":"3cb660c9-4562-449d-b703-ec9b15c8a61d","name":"syncomp.Program.Main()","source":{"name":"Program.cs","path":"/home/jpfeiffer/Source/Synacor/cs/syncomp/src/Program.cs"}}],"totalFrames":2},"command":"stackTrace","request_seq":6,"seq":23,"success":true,"type":"response"}Content-Length: 158

{"body":{"scopes":[{"name":"Locals","namedVariables":8,"variablesReference":1}]},"command":"scopes","request_seq":7,"seq":24,"success":true,"type":"response"}Content-Length: 6331

{"body":{"variables":[{"evaluateName":"code","name":"code","type":"string","value":"\"function str_equal(var str_a, var str_b) {\\n  var a_len = str_len(str_a);\\n  var b_len = str_len(str_b);\\n  if (!(a_len == b_len)) {\\n    return 0;\\n  }\\n  for (var i = 0; i < a_len; ++i) {\\n    var a_val = ~(str_a + i);\\n    var b_val = ~(str_b + i);\\n    if (!(a_val == b_val)) {\\n      return 0;\\n    }\\n  }\\n  return 1;\\n}\\n\\nfunction alloc() {\\n  var data_index = 16382;\\n  while (!(~(data_index))) {\\n    --data_index;\\n  }\\n  data_index = data_index + 2;\\n  return data_index;\\n}\\n\\nfunction alloc_chunk(var length) {\\n  var ptr = alloc();\\n  var dest_ptr = ptr + length;\\n  wmem(dest_ptr, 32767);\\n  return ptr;\\n}\\n\\nfunction mem_cp(var s_ptr, var d_ptr, var len) {\\n  var current_byte = 0;\\n  while (current_byte <= len) {\\n    var byte_to_write_ptr = s_ptr + current_byte;\\n    var dest_ptr = d_ptr + current_byte;\\n    wmem(dest_ptr, ~byte_to_write_ptr);\\n    ++current_byte;\\n  }\\n}\\n\\nfunction str_len(var str_ptr) {\\n  var length = 0;\\n  while(~str_ptr) {\\n    ++str_ptr;\\n    ++length;\\n  }\\n  return length;\\n}\\n\\nfunction str_cat(var str_a, var str_b) {\\n  var a_len = str_len(str_a);\\n  var b_len = str_len(str_b);\\n  var alloc_ptr = alloc();\\n  mem_cp(str_a, alloc_ptr, a_len);\\n  var end_address = alloc_ptr + a_len;\\n  ++b_len;\\n  mem_cp(str_b, end_address, b_len);\\n  return alloc_ptr;\\n}\\n\\nfunction flip_str(var str_ptr) {\\n  var alloc_ptr = alloc();\\n  var len = str_len(str_ptr);\\n  var index = 0;\\n  while (index < len) {\\n    var source_index = str_ptr + index;\\n    push(~source_index);\\n    ++index;\\n  }\\n\\n  var current_byte = pop();\\n  index = 0;\\n  while (index < len) {\\n    var dest_index = alloc_ptr + index;\\n    wmem(dest_index, current_byte);\\n\\n    ++index;\\n    current_byte = pop();\\n  }\\n  push(current_byte);\\n\\n  return alloc_ptr;\\n}\\n\\nfunction input() {\\n  var data_index = 16384;\\n  var in_char = in();\\n  var is_newline = in_char == 10;\\n  while (!is_newline && in_char) {\\n    wmem(data_index, in_char);\\n    ++data_index;\\n    in_char = in();\\n    is_newline = in_char == 10;\\n  }\\n  wmem(data_index, 0);\\n  var alloc_ptr = alloc();\\n  var length = str_len(16384);\\n  mem_cp(16384, alloc_ptr, length);\\n  return alloc_ptr;\\n}\\n\\nfunction print(var str_ptr) {\\n  while (~str_ptr) {\\n    out(~str_ptr);\\n    ++str_ptr;\\n  }\\n}\\n\\nfunction println(var str_ptr) {\\n  print(str_ptr);\\n  out(10);\\n}\\n\\nfunction print_number(var num) {\\n  if (num == 10) {\\n    out(49);\\n    out(48);\\n    return;\\n  }\\n  var charNum;\\n  var length = 0;\\n  while (num > 10) {\\n    charNum = num % 10;\\n    push(charNum);\\n    ++length;\\n    num = num / 10;\\n  }\\n  charNum = num % 10;\\n  push(charNum);\\n  ++length;\\n\\n  //Clean up the stack and output number\\n  var stackIndex = 0;\\n\\n  while(stackIndex < length) {\\n    stackIndex = stackIndex + 1;\\n    out(pop() + 48);\\n  }\\n}\\n\\nfunction dump_mem() {\\n  var i = 0;\\n\\n  while (~i) {\\n    ++i;\\n    print_number(~i);\\n    out(10);\\n  }\\n}\\n\\nfunction int(var str_ptr) {\\n  var flipped = flip_str(str_ptr);\\n  var len = str_len(flipped);\\n  //Get rid of the null byte\\n  --len;\\n  var index = 0;\\n  var num = 0;\\n  while (index <= len) {\\n    var char = flipped + index;\\n    char = ~char;\\n    var is_greater_than = char > 47;\\n    var is_less_than = char < 58;\\n    //var is_correct = is_greater_than && is_less_than;\\n    //print_number(char);\\n    //out(10);\\n    if (is_greater_than && is_less_than) {\\n      var this_digit = char - 48;\\n      print_number(this_digit);\\n      out(10);\\n      //print_number(index);\\n      //out(10);\\n      var digit_index = 0;\\n      var this_index = index - 1;\\n      while (digit_index < this_index) {\\n        //print(\\\"looping for \\\");\\n        //print_number(this_digit);\\n        //out(10);\\n        this_digit = this_digit * 10;\\n        ++digit_index;\\n      }\\n      //print_number(this_digit);\\n      //out(10);\\n      num = num + this_digit;\\n    }\\n    ++index;\\n  }\\n\\n  print_number(num);\\n  return num;\\n}\\nfunction throw(var msg) {\\r\\n  println(msg);\\r\\n  exit();\\r\\n}\\n//Hard deps are error.bc and stdlib.bc\\n\\nfunction str_is_eq(var str_actual) {\\n  var curry = function(var str_expected) {\\n    if (!str_equal(str_expected, str_actual)) {\\n      println(\\\"Not Equal\\\");\\n      // throw(\\\"stuff\\\");\\n    }\\n    println(\\\"Getting here\\\");\\n  }\\n  return curry;\\n}\\n\\nfunction assert(var expected, var curry) {\\n  println(\\\"assert\\\");\\n  print_number(curry);\\n  curry(expected);\\n}\\n\\n\\n\\nvar test  = \\\"test\\\";\\nvar testtwo = \\\"test2\\\";\\n\\nprintln(\\\"Getting here\\\");\\n\\nassert(test, str_is_eq(testtwo));\\n\\nprintln(\\\"Getting here\\\");\\n\"","variablesReference":0},{"evaluateName":"workingDirectory","name":"workingDirectory","type":"string","value":"\"/home/jpfeiffer/Source/Synacor/cs/syncomp/src/programs/tests/stdlib\"","variablesReference":0},{"evaluateName":"includeLocations","name":"includeLocations","namedVariables":14,"type":"System.Collections.Generic.List<string>","value":"{System.Collections.Generic.List<string>}","variablesReference":2},{"evaluateName":"preprocessor","name":"preprocessor","namedVariables":4,"type":"syncomp.Preprocessor","value":"{syncomp.Preprocessor}","variablesReference":3},{"evaluateName":"tokens","name":"tokens","namedVariables":14,"type":"System.Collections.Generic.List<syncomp.SyntaxToken>","value":"{System.Collections.Generic.List<syncomp.SyntaxToken>}","variablesReference":4},{"evaluateName":"lines","name":"lines","namedVariables":14,"type":"System.Collections.Generic.List<string>","value":"{System.Collections.Generic.List<string>}","variablesReference":5},{"evaluateName":"ast","name":"ast","namedVariables":14,"type":"System.Collections.Generic.List<syncomp.AstNode>","value":"{System.Collections.Generic.List<syncomp.AstNode>}","variablesReference":6},{"evaluateName":"transformer","name":"transformer","namedVariables":3,"type":"syncomp.Transformer","value":"{syncomp.Transformer}","variablesReference":7}]},"command":"variables","request_seq":8,"seq":25,"success":true,"type":"response"}Content-Length: 634

{"body":{"stackFrames":[{"column":13,"endColumn":51,"endLine":105,"id":59120224829440,"line":105,"moduleId":"3cb660c9-4562-449d-b703-ec9b15c8a61d","name":"syncomp.Program.CompileCode()","source":{"name":"Program.cs","path":"/home/jpfeiffer/Source/Synacor/cs/syncomp/src/Program.cs"}},{"column":13,"endColumn":73,"endLine":50,"id":59120224829441,"line":50,"moduleId":"3cb660c9-4562-449d-b703-ec9b15c8a61d","name":"syncomp.Program.Main()","source":{"name":"Program.cs","path":"/home/jpfeiffer/Source/Synacor/cs/syncomp/src/Program.cs"}}],"totalFrames":2},"command":"stackTrace","request_seq":9,"seq":26,"success":true,"type":"response"}Content-Length: 159

{"body":{"scopes":[{"name":"Locals","namedVariables":8,"variablesReference":8}]},"command":"scopes","request_seq":10,"seq":27,"success":true,"type":"response"}Content-Length: 6337

{"body":{"variables":[{"evaluateName":"code","name":"code","type":"string","value":"\"function str_equal(var str_a, var str_b) {\\n  var a_len = str_len(str_a);\\n  var b_len = str_len(str_b);\\n  if (!(a_len == b_len)) {\\n    return 0;\\n  }\\n  for (var i = 0; i < a_len; ++i) {\\n    var a_val = ~(str_a + i);\\n    var b_val = ~(str_b + i);\\n    if (!(a_val == b_val)) {\\n      return 0;\\n    }\\n  }\\n  return 1;\\n}\\n\\nfunction alloc() {\\n  var data_index = 16382;\\n  while (!(~(data_index))) {\\n    --data_index;\\n  }\\n  data_index = data_index + 2;\\n  return data_index;\\n}\\n\\nfunction alloc_chunk(var length) {\\n  var ptr = alloc();\\n  var dest_ptr = ptr + length;\\n  wmem(dest_ptr, 32767);\\n  return ptr;\\n}\\n\\nfunction mem_cp(var s_ptr, var d_ptr, var len) {\\n  var current_byte = 0;\\n  while (current_byte <= len) {\\n    var byte_to_write_ptr = s_ptr + current_byte;\\n    var dest_ptr = d_ptr + current_byte;\\n    wmem(dest_ptr, ~byte_to_write_ptr);\\n    ++current_byte;\\n  }\\n}\\n\\nfunction str_len(var str_ptr) {\\n  var length = 0;\\n  while(~str_ptr) {\\n    ++str_ptr;\\n    ++length;\\n  }\\n  return length;\\n}\\n\\nfunction str_cat(var str_a, var str_b) {\\n  var a_len = str_len(str_a);\\n  var b_len = str_len(str_b);\\n  var alloc_ptr = alloc();\\n  mem_cp(str_a, alloc_ptr, a_len);\\n  var end_address = alloc_ptr + a_len;\\n  ++b_len;\\n  mem_cp(str_b, end_address, b_len);\\n  return alloc_ptr;\\n}\\n\\nfunction flip_str(var str_ptr) {\\n  var alloc_ptr = alloc();\\n  var len = str_len(str_ptr);\\n  var index = 0;\\n  while (index < len) {\\n    var source_index = str_ptr + index;\\n    push(~source_index);\\n    ++index;\\n  }\\n\\n  var current_byte = pop();\\n  index = 0;\\n  while (index < len) {\\n    var dest_index = alloc_ptr + index;\\n    wmem(dest_index, current_byte);\\n\\n    ++index;\\n    current_byte = pop();\\n  }\\n  push(current_byte);\\n\\n  return alloc_ptr;\\n}\\n\\nfunction input() {\\n  var data_index = 16384;\\n  var in_char = in();\\n  var is_newline = in_char == 10;\\n  while (!is_newline && in_char) {\\n    wmem(data_index, in_char);\\n    ++data_index;\\n    in_char = in();\\n    is_newline = in_char == 10;\\n  }\\n  wmem(data_index, 0);\\n  var alloc_ptr = alloc();\\n  var length = str_len(16384);\\n  mem_cp(16384, alloc_ptr, length);\\n  return alloc_ptr;\\n}\\n\\nfunction print(var str_ptr) {\\n  while (~str_ptr) {\\n    out(~str_ptr);\\n    ++str_ptr;\\n  }\\n}\\n\\nfunction println(var str_ptr) {\\n  print(str_ptr);\\n  out(10);\\n}\\n\\nfunction print_number(var num) {\\n  if (num == 10) {\\n    out(49);\\n    out(48);\\n    return;\\n  }\\n  var charNum;\\n  var length = 0;\\n  while (num > 10) {\\n    charNum = num % 10;\\n    push(charNum);\\n    ++length;\\n    num = num / 10;\\n  }\\n  charNum = num % 10;\\n  push(charNum);\\n  ++length;\\n\\n  //Clean up the stack and output number\\n  var stackIndex = 0;\\n\\n  while(stackIndex < length) {\\n    stackIndex = stackIndex + 1;\\n    out(pop() + 48);\\n  }\\n}\\n\\nfunction dump_mem() {\\n  var i = 0;\\n\\n  while (~i) {\\n    ++i;\\n    print_number(~i);\\n    out(10);\\n  }\\n}\\n\\nfunction int(var str_ptr) {\\n  var flipped = flip_str(str_ptr);\\n  var len = str_len(flipped);\\n  //Get rid of the null byte\\n  --len;\\n  var index = 0;\\n  var num = 0;\\n  while (index <= len) {\\n    var char = flipped + index;\\n    char = ~char;\\n    var is_greater_than = char > 47;\\n    var is_less_than = char < 58;\\n    //var is_correct = is_greater_than && is_less_than;\\n    //print_number(char);\\n    //out(10);\\n    if (is_greater_than && is_less_than) {\\n      var this_digit = char - 48;\\n      print_number(this_digit);\\n      out(10);\\n      //print_number(index);\\n      //out(10);\\n      var digit_index = 0;\\n      var this_index = index - 1;\\n      while (digit_index < this_index) {\\n        //print(\\\"looping for \\\");\\n        //print_number(this_digit);\\n        //out(10);\\n        this_digit = this_digit * 10;\\n        ++digit_index;\\n      }\\n      //print_number(this_digit);\\n      //out(10);\\n      num = num + this_digit;\\n    }\\n    ++index;\\n  }\\n\\n  print_number(num);\\n  return num;\\n}\\nfunction throw(var msg) {\\r\\n  println(msg);\\r\\n  exit();\\r\\n}\\n//Hard deps are error.bc and stdlib.bc\\n\\nfunction str_is_eq(var str_actual) {\\n  var curry = function(var str_expected) {\\n    if (!str_equal(str_expected, str_actual)) {\\n      println(\\\"Not Equal\\\");\\n      // throw(\\\"stuff\\\");\\n    }\\n    println(\\\"Getting here\\\");\\n  }\\n  return curry;\\n}\\n\\nfunction assert(var expected, var curry) {\\n  println(\\\"assert\\\");\\n  print_number(curry);\\n  curry(expected);\\n}\\n\\n\\n\\nvar test  = \\\"test\\\";\\nvar testtwo = \\\"test2\\\";\\n\\nprintln(\\\"Getting here\\\");\\n\\nassert(test, str_is_eq(testtwo));\\n\\nprintln(\\\"Getting here\\\");\\n\"","variablesReference":0},{"evaluateName":"workingDirectory","name":"workingDirectory","type":"string","value":"\"/home/jpfeiffer/Source/Synacor/cs/syncomp/src/programs/tests/stdlib\"","variablesReference":0},{"evaluateName":"includeLocations","name":"includeLocations","namedVariables":14,"type":"System.Collections.Generic.List<string>","value":"{System.Collections.Generic.List<string>}","variablesReference":9},{"evaluateName":"preprocessor","name":"preprocessor","namedVariables":4,"type":"syncomp.Preprocessor","value":"{syncomp.Preprocessor}","variablesReference":10},{"evaluateName":"tokens","name":"tokens","namedVariables":14,"type":"System.Collections.Generic.List<syncomp.SyntaxToken>","value":"{System.Collections.Generic.List<syncomp.SyntaxToken>}","variablesReference":11},{"evaluateName":"lines","name":"lines","namedVariables":14,"type":"System.Collections.Generic.List<string>","value":"{System.Collections.Generic.List<string>}","variablesReference":12},{"evaluateName":"ast","name":"ast","namedVariables":14,"type":"System.Collections.Generic.List<syncomp.AstNode>","value":"{System.Collections.Generic.List<syncomp.AstNode>}","variablesReference":13},{"evaluateName":"transformer","name":"transformer","namedVariables":3,"type":"syncomp.Transformer","value":"{syncomp.Transformer}","variablesReference":14}]},"command":"variables","request_seq":11,"seq":28,"success":true,"type":"response"}Content-Length: 2210

{"body":{"variables":[{"evaluateName":"ast._items","name":"_items","namedVariables":32,"type":"syncomp.AstNode[]","value":"{syncomp.AstNode[32]}","variablesReference":15},{"evaluateName":"ast._size","name":"_size","type":"int","value":"21","variablesReference":0},{"evaluateName":"ast._version","name":"_version","type":"int","value":"21","variablesReference":0},{"evaluateName":"ast._syncRoot","name":"_syncRoot","type":"object","value":"null","variablesReference":0},{"evaluateName":"ast.Capacity","name":"Capacity","type":"int","value":"32","variablesReference":0},{"evaluateName":"ast.Count","name":"Count","type":"int","value":"21","variablesReference":0},{"evaluateName":"ast.System.Collections.IList.IsFixedSize","name":"System.Collections.IList.IsFixedSize","type":"bool","value":"false","variablesReference":0},{"evaluateName":"ast.System.Collections.Generic.ICollection<T>.IsReadOnly","name":"System.Collections.Generic.ICollection<T>.IsReadOnly","type":"bool","value":"false","variablesReference":0},{"evaluateName":"ast.System.Collections.IList.IsReadOnly","name":"System.Collections.IList.IsReadOnly","type":"bool","value":"false","variablesReference":0},{"evaluateName":"ast.System.Collections.ICollection.IsSynchronized","name":"System.Collections.ICollection.IsSynchronized","type":"bool","value":"false","variablesReference":0},{"evaluateName":"ast.System.Collections.ICollection.SyncRoot","name":"System.Collections.ICollection.SyncRoot","type":"object","value":"{object}","variablesReference":0},{"evaluateName":"ast.Item","name":"Item","namedVariables":30,"type":"System.Reflection.TargetParameterCountException","value":"{System.Reflection.TargetParameterCountException}","variablesReference":16},{"evaluateName":"ast.System.Collections.IList.Item","name":"System.Collections.IList.Item","namedVariables":30,"type":"System.Reflection.TargetParameterCountException","value":"{System.Reflection.TargetParameterCountException}","variablesReference":17},{"evaluateName":"System.Collections.Generic.List<syncomp.AstNode>","name":"Static members","namedVariables":1,"type":"","value":"","variablesReference":18}]},"command":"variables","request_seq":12,"seq":29,"success":true,"type":"response"}Content-Length: 2214

{"body":{"variables":[{"evaluateName":"ast._items","name":"_items","namedVariables":32,"type":"syncomp.AstNode[]","value":"{syncomp.AstNode[32]}","variablesReference":19},{"evaluateName":"ast._size","name":"_size","type":"int","value":"21","variablesReference":0},{"evaluateName":"ast._version","name":"_version","type":"int","value":"21","variablesReference":0},{"evaluateName":"ast._syncRoot","name":"_syncRoot","type":"object","value":"{object}","variablesReference":0},{"evaluateName":"ast.Capacity","name":"Capacity","type":"int","value":"32","variablesReference":0},{"evaluateName":"ast.Count","name":"Count","type":"int","value":"21","variablesReference":0},{"evaluateName":"ast.System.Collections.IList.IsFixedSize","name":"System.Collections.IList.IsFixedSize","type":"bool","value":"false","variablesReference":0},{"evaluateName":"ast.System.Collections.Generic.ICollection<T>.IsReadOnly","name":"System.Collections.Generic.ICollection<T>.IsReadOnly","type":"bool","value":"false","variablesReference":0},{"evaluateName":"ast.System.Collections.IList.IsReadOnly","name":"System.Collections.IList.IsReadOnly","type":"bool","value":"false","variablesReference":0},{"evaluateName":"ast.System.Collections.ICollection.IsSynchronized","name":"System.Collections.ICollection.IsSynchronized","type":"bool","value":"false","variablesReference":0},{"evaluateName":"ast.System.Collections.ICollection.SyncRoot","name":"System.Collections.ICollection.SyncRoot","type":"object","value":"{object}","variablesReference":0},{"evaluateName":"ast.Item","name":"Item","namedVariables":30,"type":"System.Reflection.TargetParameterCountException","value":"{System.Reflection.TargetParameterCountException}","variablesReference":20},{"evaluateName":"ast.System.Collections.IList.Item","name":"System.Collections.IList.Item","namedVariables":30,"type":"System.Reflection.TargetParameterCountException","value":"{System.Reflection.TargetParameterCountException}","variablesReference":21},{"evaluateName":"System.Collections.Generic.List<syncomp.AstNode>","name":"Static members","namedVariables":1,"type":"","value":"","variablesReference":22}]},"command":"variables","request_seq":13,"seq":30,"success":true,"type":"response"}